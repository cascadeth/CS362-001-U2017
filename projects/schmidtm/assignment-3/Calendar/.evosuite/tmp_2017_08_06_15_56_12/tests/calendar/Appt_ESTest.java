/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 06 22:58:02 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.CalendarUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Appt_ESTest extends Appt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Appt appt0 = new Appt((-301), (-301), 1, 7, (-775), "", "");
      int[] intArray0 = appt0.getRecurDays();
      appt0.setRecurrence(intArray0, (-1511), (-301), 3200);
      boolean boolean0 = appt0.isRecurring();
      assertEquals(-301, appt0.getRecurIncrement());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Appt appt0 = new Appt((-1), (-618), 0, 0, 0, (String) null, (String) null);
      appt0.setStartMonth(0);
      assertEquals(-1, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-618, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Appt appt0 = new Appt(9, 9, 9, 9, 9, "pm", " ,");
      boolean boolean0 = appt0.getValid();
      assertEquals(9, appt0.getStartMonth());
      assertEquals(" ,", appt0.getDescription());
      assertEquals("pm", appt0.getTitle());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(9, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(9, appt0.getStartMinute());
      assertTrue(boolean0);
      assertEquals(9, appt0.getStartYear());
      assertEquals(9, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 13, 10, 10, "V i 3C[1", (String) null);
      appt0.getTitle();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(10, appt0.getStartYear());
      assertEquals(12, appt0.getStartMinute());
      assertEquals(13, appt0.getStartDay());
      assertEquals(10, appt0.getStartMonth());
      assertEquals(12, appt0.getStartHour());
      assertEquals("", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 60, "PPtKCW5Ask'T+5+2CK", "PPtKCW5Ask'T+5+2CK");
      int int0 = appt0.getStartYear();
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(60, int0);
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals("PPtKCW5Ask'T+5+2CK", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Appt appt0 = new Appt((-1979), (-1979), (-1979), 11, (-1979), "m@:k\"9.S", "m@:k\"9.S");
      int int0 = appt0.getStartYear();
      assertEquals(-1979, appt0.getStartMinute());
      assertEquals(11, appt0.getStartMonth());
      assertEquals(-1979, appt0.getStartHour());
      assertEquals("m@:k\"9.S", appt0.getDescription());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(-1979, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals((-1979), int0);
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, (String) null, (String) null);
      int int0 = appt0.getStartMonth();
      assertEquals(11, int0);
      assertEquals(0, appt0.getRecurIncrement());
      assertTrue(appt0.getValid());
      assertEquals(11, appt0.getStartYear());
      assertEquals(11, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(11, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Appt appt0 = new Appt(24, 0, 1, 1, 2, "BJNR}jyEjoxQWQdHoc", "BJNR}jyEjoxQWQdHoc");
      int int0 = appt0.getStartMinute();
      assertEquals(2, appt0.getRecurBy());
      assertEquals("BJNR}jyEjoxQWQdHoc", appt0.getTitle());
      assertEquals(2, appt0.getStartYear());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, int0);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(24, appt0.getStartHour());
      assertEquals(1, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Appt appt0 = new Appt(558, 558, 0, 0, 558, "--", "--");
      int int0 = appt0.getStartMinute();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("--", appt0.getDescription());
      assertEquals(558, appt0.getStartHour());
      assertEquals(558, appt0.getStartYear());
      assertEquals("--", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
      assertEquals(558, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "1903-07-01T00:00:00Z", "");
      int int0 = appt0.getStartHour();
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Appt appt0 = new Appt(1753, 1753, (-2886), 0, 840, "I|J=<40fG~:1A", "I|J=<40fG~:1A");
      int int0 = appt0.getStartHour();
      assertEquals(-2886, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(1753, int0);
      assertFalse(appt0.isRecurring());
      assertEquals("I|J=<40fG~:1A", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("I|J=<40fG~:1A", appt0.getDescription());
      assertEquals(840, appt0.getStartYear());
      assertEquals(1753, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Appt appt0 = new Appt((-2689), (-2689), 0, 2, 2, "calendar.Appt", "calendar.Appt");
      int int0 = appt0.getStartDay();
      assertEquals(0, int0);
      assertFalse(appt0.getValid());
      assertEquals("calendar.Appt", appt0.getTitle());
      assertEquals(2, appt0.getStartYear());
      assertEquals("calendar.Appt", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(-2689, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(-2689, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Appt appt0 = new Appt(80, 80, 11, 11, 11, "", " ,");
      int int0 = appt0.getStartDay();
      assertEquals(11, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(80, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getTitle());
      assertEquals(11, int0);
      assertEquals(80, appt0.getStartMinute());
      assertEquals(11, appt0.getStartYear());
      assertEquals(" ,", appt0.getDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "%Y-%M%z", "R/D0Ly_[q=uc$:lH");
      int[] intArray0 = appt0.getRecurDays();
      appt0.setRecurrence(intArray0, 0, (-406), 2140);
      int int0 = appt0.getRecurNumber();
      assertEquals(-406, appt0.getRecurIncrement());
      assertEquals(2140, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Appt appt0 = new Appt(1753, 1753, (-2886), 0, 840, "I|J=<40fG~:1A", "I|J=<40fG~:1A");
      int[] intArray0 = new int[3];
      appt0.setRecurrence(intArray0, 2186, 1753, (-1855));
      int int0 = appt0.getRecurNumber();
      assertEquals(2186, appt0.getRecurBy());
      assertEquals((-1855), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 6107, 0, (-271), "}cFzjBys", "}cFzjBys");
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, (-271), 6, 1000);
      int int0 = appt0.getRecurIncrement();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Appt appt0 = new Appt(0, (-2199), 0, 0, 4045, "", "");
      int[] intArray0 = new int[4];
      appt0.setRecurrence(intArray0, (-2199), (-1652), 0);
      int int0 = appt0.getRecurIncrement();
      assertEquals(-2199, appt0.getRecurBy());
      assertEquals((-1652), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 6107, 0, (-271), "}cFzjBys", "}cFzjBys");
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, (-2036), 0, 43);
      appt0.getRecurDays();
      assertEquals(43, appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Appt appt0 = new Appt(345, 345, 83, 3, (-1480), "Millisecond", "Millisecond");
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, 0, 345, (-1372));
      int int0 = appt0.getRecurBy();
      assertEquals(345, appt0.getRecurIncrement());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Appt appt0 = new Appt(1301, 1301, 1301, 0, 0, "UnknownField", "5`pU+Mu[5:sQSsW`>");
      int[] intArray0 = new int[9];
      appt0.setRecurrence(intArray0, (-1108), 5, 0);
      int int0 = appt0.getRecurBy();
      assertEquals(5, appt0.getRecurIncrement());
      assertEquals((-1108), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Appt appt0 = new Appt((-1), (-618), 0, 0, 0, (String) null, (String) null);
      String string0 = appt0.getDescription();
      assertEquals(-1, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(-618, appt0.getStartMinute());
      assertNotNull(string0);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 13, 10, 10, "V i 3C[1", (String) null);
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartYear(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Appt appt0 = new Appt((-301), (-301), 1, 7, (-775), "", "");
      int[] intArray0 = appt0.getRecurDays();
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartYear(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 13, 10, 10, "V i 3C[1", (String) null);
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartMonth(12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 13, 10, 10, "V i 3C[1", (String) null);
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartMinute(12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Appt appt0 = new Appt(1752, 13, 13, 11, 83, "-i|\"PKCu3c", "-i|\"PKCu3c");
      int[] intArray0 = new int[3];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartMinute((-2073));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 13, 10, 10, "V i 3C[1", (String) null);
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartHour((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Appt appt0 = new Appt(208, 72, 72, 3, (-54), "", "");
      int[] intArray0 = new int[0];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartHour((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 13, 10, 10, "V i 3C[1", (String) null);
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartDay(333);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Appt appt0 = new Appt(19, 19, 19, 11, 378, "C{T7DuolW &3Evkd>4Q", "C{T7DuolW &3Evkd>4Q");
      int[] intArray0 = new int[0];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartDay(19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CalendarUtil.DaysInMonth = null;
      Appt appt0 = null;
      try {
        appt0 = new Appt(Integer.MIN_VALUE, Integer.MIN_VALUE, (-2723), (-1491), 1204, "%Y-%M%z", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Appt appt0 = null;
      try {
        appt0 = new Appt(1000, (-3856), (-3856), (-3856), (-3856), "F:#t%uDdhwDei&Gmrd2", "F:#t%uDdhwDei&Gmrd2");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3856
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Appt appt0 = new Appt((-3038), (-3038), 0, 2, (-3038), "org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl", "org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl");
      assertEquals("org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl", appt0.getDescription());
      
      appt0.setDescription((String) null);
      assertEquals(-3038, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Appt appt0 = new Appt((-301), (-301), 1, 7, (-775), "", "");
      appt0.setDescription("\t");
      assertEquals("\t", appt0.getDescription());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Appt appt0 = new Appt((-301), (-301), 1, 7, (-775), "", "");
      appt0.setTitle("");
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(1, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals(-775, appt0.getStartYear());
      assertEquals(-301, appt0.getStartMinute());
      assertEquals(-301, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(7, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, (String) null, (String) null);
      appt0.setTitle((String) null);
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(11, appt0.getStartDay());
      assertEquals(11, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(11, appt0.getStartHour());
      assertEquals(11, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Appt appt0 = new Appt((-1113), 0, (-1113), 0, 0, "", "");
      int int0 = appt0.getRecurNumber();
      assertEquals(0, int0);
      assertEquals(-1113, appt0.getStartHour());
      assertEquals(-1113, appt0.getStartDay());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Appt appt0 = new Appt((-1), (-618), 0, 0, 0, (String) null, (String) null);
      int int0 = appt0.getStartMinute();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(-1, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartYear());
      assertEquals((-618), int0);
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Appt appt0 = new Appt((-2689), (-2689), 0, 2, 2, "calendar.Appt", "calendar.Appt");
      int int0 = appt0.getStartHour();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartMonth());
      assertEquals("calendar.Appt", appt0.getDescription());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartDay());
      assertEquals("calendar.Appt", appt0.getTitle());
      assertEquals(2, appt0.getStartYear());
      assertEquals((-2689), int0);
      assertEquals(-2689, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "%Y-%M%z", "R/D0Ly_[q=uc$:lH");
      int int0 = appt0.getStartMonth();
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, int0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals("%Y-%M%z", appt0.getTitle());
      assertEquals("R/D0Ly_[q=uc$:lH", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Appt appt0 = new Appt((-1), (-618), 0, 0, 0, (String) null, (String) null);
      int int0 = appt0.getStartYear();
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-1, appt0.getStartHour());
      assertEquals(0, int0);
      assertEquals(-618, appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Appt appt0 = new Appt(0, (-2843), 0, 0, 0, "", "");
      appt0.getValid();
      assertEquals(-2843, appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Appt appt0 = new Appt((-1), (-618), 0, 0, 0, (String) null, (String) null);
      String string0 = appt0.getTitle();
      assertEquals(-618, appt0.getStartMinute());
      assertNotNull(string0);
      assertEquals(-1, appt0.getStartHour());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 6107, 0, (-271), "}cFzjBys", "}cFzjBys");
      appt0.getDescription();
      assertEquals(0, appt0.getStartHour());
      assertEquals(-271, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(6107, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Appt appt0 = new Appt(Integer.MIN_VALUE, (-3638), Integer.MIN_VALUE, 0, 1, "", "\n");
      int int0 = appt0.getStartDay();
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-3638, appt0.getStartMinute());
      assertEquals(-2147483648, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(Integer.MIN_VALUE, int0);
      assertFalse(appt0.isRecurring());
      assertEquals("\n", appt0.getDescription());
      assertEquals("", appt0.getTitle());
      assertEquals(1, appt0.getStartYear());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, (-9), 10, 10, "V i 3C[1", "V i 3C[1");
      appt0.setRecurrence((int[]) null, 10, 10, (-9));
      assertEquals(10, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Appt appt0 = new Appt(11, 60, 60, 11, (-3796), "EXY|5lyiKpKyp=$p", "EXY|5lyiKpKyp=$p");
      String string0 = appt0.toString();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(60, appt0.getStartDay());
      assertNull(string0);
      assertEquals(11, appt0.getStartHour());
      assertEquals(-3796, appt0.getStartYear());
      assertFalse(appt0.isRecurring());
      assertEquals(11, appt0.getStartMonth());
      assertEquals(60, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[5] = 767;
      CalendarUtil.DaysInMonth = intArray0;
      Appt appt0 = new Appt(0, 24, 767, 5, 400, "%Y-%M%z", "%Y-%M%z");
      String string0 = appt0.toString();
      assertEquals(0, appt0.getRecurIncrement());
      assertNotNull(string0);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("\t5/767/400 at 12:24am ,%Y-%M%z, %Y-%M%z\n", string0);
      assertEquals(2, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Appt appt0 = new Appt(19, 19, 19, 11, 378, "C{T7DuolW &3Evkd>4Q", "C{T7DuolW &3Evkd>4Q");
      String string0 = appt0.toString();
      assertEquals("\t11/19/378 at 7:19pm ,C{T7DuolW &3Evkd>4Q, C{T7DuolW &3Evkd>4Q\n", string0);
      assertNotNull(string0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, (String) null, (String) null);
      String string0 = appt0.toString();
      assertEquals(0, appt0.getRecurIncrement());
      assertNotNull(string0);
      assertEquals("\t11/11/11 at 11:11am ,, \n", string0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Appt appt0 = new Appt(814, 814, 12, 0, 11, " ,", "am");
      int[] intArray0 = appt0.getRecurDays();
      appt0.setRecurrence(intArray0, 10, 11, (-3763));
      boolean boolean0 = appt0.isRecurring();
      assertEquals(10, appt0.getRecurBy());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Appt appt0 = new Appt(1, 0, 1, 0, 0, "<Hck7wRT", (String) null);
      assertEquals(0, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(1, appt0.getStartDay());
      assertEquals(1, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 6107, 0, (-271), "}cFzjBys", "}cFzjBys");
      assertEquals(6107, appt0.getStartDay());
      
      appt0.setStartDay(0);
      assertFalse(appt0.isRecurring());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Appt appt0 = new Appt(208, 72, 72, 3, (-54), "", "");
      appt0.setStartHour(11);
      assertEquals(11, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 13, 10, 10, "V i 3C[1", (String) null);
      appt0.setStartMinute(12);
      assertEquals(10, appt0.getStartYear());
      assertEquals(13, appt0.getStartDay());
      assertEquals("", appt0.getDescription());
      assertEquals("V i 3C[1", appt0.getTitle());
      assertEquals(10, appt0.getStartMonth());
      assertEquals(12, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.isRecurring());
      assertEquals(12, appt0.getStartHour());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Appt appt0 = new Appt(9, 9, 9, 9, 9, "pm", " ,");
      // Undeclared exception!
      try { 
        appt0.setStartMonth(1672);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1672
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Appt appt0 = new Appt(0, (-2843), 0, 0, 0, "", "");
      int int0 = appt0.getRecurBy();
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, int0);
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(-2843, appt0.getStartMinute());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Appt appt0 = new Appt(19, 19, 19, 11, 378, "C{T7DuolW &3Evkd>4Q", "C{T7DuolW &3Evkd>4Q");
      appt0.setStartYear(378);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(19, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertTrue(appt0.getValid());
      assertEquals(19, appt0.getStartDay());
      assertEquals(378, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(19, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 6107, 0, (-271), "}cFzjBys", "}cFzjBys");
      int int0 = appt0.getRecurIncrement();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(-271, appt0.getStartYear());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartHour());
      assertEquals(6107, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("}cFzjBys", appt0.getTitle());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 13, 10, 10, "V i 3C[1", (String) null);
      String string0 = appt0.toString();
      assertEquals("\t10/13/10 at 12:12pm ,V i 3C[1, \n", string0);
      assertNotNull(string0);
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Appt appt0 = new Appt(814, 814, 12, 0, 11, " ,", "am");
      boolean boolean0 = appt0.isRecurring();
      assertEquals("am", appt0.getDescription());
      assertEquals(12, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(814, appt0.getStartHour());
      assertFalse(boolean0);
      assertEquals(11, appt0.getStartYear());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(814, appt0.getStartMinute());
      assertEquals(" ,", appt0.getTitle());
  }
}
